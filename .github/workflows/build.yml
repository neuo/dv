name: Build Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        
    - name: Build executable using build_executable.py
      run: |
        cd app
        python build_executable.py
        
    - name: Create release package
      run: |
        mkdir release
        
        # 复制可执行文件
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp app/dist/剂量验证预测系统.exe release/ 2>/dev/null || cp app/dist/*.exe release/
          echo "ASSET_NAME=剂量验证预测系统-windows.exe" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp -r app/dist/剂量验证预测系统.app release/ 2>/dev/null || cp app/dist/剂量验证预测系统 release/ 2>/dev/null || cp app/dist/* release/
          tar -czf release/剂量验证预测系统-macos.tar.gz -C release .
          echo "ASSET_NAME=剂量验证预测系统-macos.tar.gz" >> $GITHUB_ENV
        else
          cp app/dist/剂量验证预测系统 release/ 2>/dev/null || cp app/dist/* release/
          tar -czf release/剂量验证预测系统-linux.tar.gz -C release .
          echo "ASSET_NAME=剂量验证预测系统-linux.tar.gz" >> $GITHUB_ENV
        fi
        
        # 创建说明文件
        echo "剂量验证预测系统 - ${{ matrix.os }} 版本" > release/README.txt
        echo "构建时间: $(date)" >> release/README.txt
        echo "" >> release/README.txt
        echo "使用说明:" >> release/README.txt
        echo "1. 下载并解压此文件" >> release/README.txt
        echo "2. 将您的模型文件(result目录)放在可执行文件同一目录下" >> release/README.txt
        echo "3. 双击运行可执行文件" >> release/README.txt
        echo "" >> release/README.txt
        echo "注意: 模型文件需要单独提供，不包含在此安装包中" >> release/README.txt
      shell: bash
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-executable
        path: release/
        
    - name: List build results (debug)
      run: |
        echo "=== Build directory contents ==="
        ls -la app/dist/ || echo "No dist directory found"
        echo "=== Release directory contents ==="
        ls -la release/ || echo "No release directory found"
      shell: bash 